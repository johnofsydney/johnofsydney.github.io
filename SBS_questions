






# SBS Front-End Dev Quiz
### Below there are a total of 40 questions covering 3 key areas of front-end development, in 2 hours or less select 20 (or more) questions and provide a response to each, do not feel as though you need to answer in order.

## HTML Questions


### Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?
- It's best to have your CSS loaded by the time the DOM is created from the HTML elements, conversely, most JS is not required until the DOM is available.
- exceptions might be
  - if your CSS file is styling elements that won't immediately be visible on the page (particularly if for example the CSS file is loading images for divs "below the fold"), then it might make sense to split the CSS file into
    - what is needed as soon as the page loads
    - what can be loaded later
  - If you are relying on the JS to modify the initial display of the HTML elements, then an argument may also be made for placing the <script> tag in the head.
    - If you do this, you may well require a `$(document).ready(...)` or a `window.onLoad()...`


### What are data- attributes good for?
- I have used data attributed to "hide" data that needs to be available in the DOM, but does not need to be displayed. In my example some of the data from a rails back end needed to be available in the document for JS to work with, but not displayed as text. Storing the data inside the data attributed meant that JS could read that data, and then create a visual element based on the data. It was never needed to be displayed as text.


_What kind of things must you be wary of when design or developing for multilingual sites?_


### Describe the difference between a cookie, sessionStorage and localStorage.
- all of these relate to staring information locally.
  - cookies are text files which contain information, and are passed back to the server with requests from the browser
  - localStorage is essentially a place where you can "save" information more or less in an object format. Useful for example, for storing a game score or similar. Refreshing the browser will not delete this information.
  - sessionStorage is similar, but is cleared when the browser is closed.


_How do you serve a page with content in multiple languages?_


### Describe the difference between <script>, <script async> and <script defer>.
- when a standard <script> tag is read into memory, the reading / parsing of the remaining elements in the page is paused while the script is fetched and executed. No problem for small and simple code, but potentially causes a delay for very large scripts.
- <script async> will begin loading the script as per above, but the script and the remaining elements on the page asre parsed in parallel, until the script is eady to be executed, at which time any remaining parsing is paused and the script executes.
- <script defer> will load the script in parallel with the remaining elements (as above), but the script will only be executed when all of the page elements have been loaded into the DOM.


_Why you would use a srcset attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute._


_Consider HTML5 as an open web platform. What are the building blocks of HTML5?


_What is progressive rendering?_


### What does a doctype do?
- It tells the browser how to parse the document. Mostly we will be dealing with HTML documents, and `<!DOCTYPE html>` tells the browser we are dealing with the latest version of HTML - HTML5.



## CSS Questions
### Can you explain the difference between coding a web site to be responsive versus using a mobile-first strategy?
- In this context, a responsive design is one which is designed for a larger screen, and then progressively adjusts for smaller screens (using media queries for instance to change margins, font sizes and display types). A mobile-first strategy tackles this issue from the other direction, by starting the design on a mobile size screen and changing the design to suit larger and larger screens using the same kind of logic as above, but in reverse.
- It can be argued that is easier to make a design that started it's life on a mobile sized screen, expand to fit a larger screen, than it is to shrink a design intended for a larger screen down to a mobile size.


### Have you ever used a grid system, and if so, what do you prefer?
- I have used both CSS Grid, and Flexbox directly in some of my own projects. I am more familiar with Flexbox, but if what you need to display is best represented in a 2 dimensional format, then CSS Grid is likely to be the best choice.
- in terms of 12 column grid systems, I have used Bootstrap in one of my own projects, and super lightweight CSS framework "lit" on a mini-project, just to have a go with it. I intend to try out the "Materialize" framework in order to practice with another alternative to bootstrap. I haven't worked with enough 3rd party frameworks to honestly have a preference.


_Are you familiar with styling SVG?_


_Describe BFC (Block Formatting Context) and how it works._


### What is the CSS display property and can you give a few examples of its use?
- display property governs if and how the contents of an element are to be displayed;
  - display: none - don't display (and don't reserve space on the page)
  - display: block - (unless over-ridden by a parent) will seek to fill 100% of the width of it's container. Think a paragraph in a book.
  - display: inline-block - will have width sufficient for it's content (and corresponding padding and margin).
  - display: flex - principal use to display it's children organised in a one dimensional format
  - display: grid - principal use to display it's children organised in a two dimensional format


### How is responsive design different from adaptive design?
- Responsive design is basically a single design that scales to different screen sizes. Specifying placement of elements on the page with units of vh/vw, %, em/rem rather than hardcoded px values is one of the ways to make your page responsive.
- Adaptive design uses @media queries (or equivalent) to apply different layouts to the page according to the size of the screen. You can certainly use the fundamental points from responsive design (above) but adaptive also requires thresholds which trigger the different layouts.


_How would you approach fixing browser-specific styling issues?_


### Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.
- starting from the inside of the box...
  - the content itself takes up as much room as it needs.
  - the padding is the "whitespace" between the content and the inside edge of the element.
  - the margin is the whitespace between the element and other elements above, below and to the sides.
  - by default the border of the element lives outside the element, in the space defined by the margin.
  - the different box model I have used (in most projects I have done) is to specify
  ```css
  * {
    box-sizing: border-box;
  }```
  which makes the specified height / width of an element include both it's border and padding. Which I have found takes some of the guess work out f placing elements on the page in a predictable manner.


_What are some of the "gotchas" for writing efficient CSS?_


### Can you give an example of an @media property other than screen?
- I'm aware of @print, but I haven't used it


### Describe pseudo-elements and discuss what they are used for.
- Pseudo-elements are used to target a specific part of an element, such as first-letter or first-line, or the element immediately following the targeted element and apply CSS to that part of the element, for instance you might want to apply a larger font size to the first line of a paragraph.
  - we can use pseudo-classes to similar effect, in particular first-child / last-child etc. For instance we could choose to apply a larger font size to the first list-item of an ordered list.


### What are the advantages/disadvantages of using CSS preprocessors?
- major advantages include nesting and mixins,
- disadvantage I think is mostly tooling.


### What is CSS selector specificity and how does it work?
- selector specificity describes the nature of _which_ css to apply to an element, and what to do if a particular element is targeted by more than one CSS selector. Broadly speaking CSS applied to
  - an html element will be over-ridden by a class selector
  - styling for a class selector will be over-ridden by styling for an id selector
  - styling for an id will be over-ridden by inline styling.
- styling for a combination of selectors will over-ride single element selectors. For example
  - the styling for `footer p` would over-ride the styling for `p`
  - styling for `.fancy .super` would over-ride styling for either `.fancy` or `.super`


_Describe what you like and dislike about the CSS preprocessors you have used._


### What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
- both reset and normalize will act to remove browser default styling.
  - reset is the most severe, after applying reset.css then you will need to style _all_ elements.
  - normalize is less severe, and will preserve useful defaults. It's main function is to make styling consistent for all browsers


## JavaScript Questions
_What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?_


### What's the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?
- null is a real value. A variable that evaluates to null really is nothing, but it knows what it is. It is not zero, or "" or false. It's just null.
- undefined would typically apply to something that could have a value, but the value has not been assigned yet. For instance if I declare a variable `let foo` but don't immediately assign a value, then at that point in the code the variable is declared but undefined.
- undeclared would typically apply to say a variable that has not been declared or assigned. For instance I could define `var foo = "foo"` but if I then try to access this variable and mis-spell it as `fuu` I would expect an error `fuu is not defined`
  - also, in JS I can assign a value to a new variable without first declaring it. This puts that new variable into the global scope, which can have unexpected consequences. Best to avoid.
- To check for these states I would use
  - Checking for null is just like checking for any other value, eg
    - if ( foo === null ) { // do something }
  - Checking for undefined can be tackled in the same way
    - if ( bar === undefined ) { // do something else } or
    - if ( typeof(bar) === "undefined" ) { // do stuff }
  - I don't have first hand experience checking for undeclared, but there's examples to follow on stack overflow etc.



### Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?
- you run the risk of other variables which have the same name but more local scope overwriting your global variable's value.
- you may start a local function expecting the global variable to be a particular value, but a different section of your code has changed it's value and you might experience unexpected results.


_Difference between document load event and document DOMContentLoaded event?_


### Describe event bubbling.
- an event such  as a click will happen to an element, but it also happens to that element's parent, grandparent, etc, all the way up to the body. Let's imagine we have an `<li>` within an `<ul>` within a `<div>` and each of these have an event listener attached. A single click on the <li> will fire the code attached to the <li>, the <ul> and also the <div>


_How do you organize your code? (module pattern, classical inheritance?)_


_Why is extending built-in JavaScript objects not a good idea?_


### Explain the difference between mutable and immutable objects.
- mutable is something that can be changed, and immutable cannot.
  - a string or a number cannot be changed, the variable can however be re-assigned
    eg -
    ```js
        let a = "foo"
        a = a + "bar" // a is reassigned.
    ```
  - an object or an array is mutable, we can change the contents within.
    -
    ```js
      let b = [1,2,3,4]
      b.push(5) // b is mutated => [1,2,3,4,5]
    ```


_What is a closure, and how/why would you use one?_


_What advantage is there for using the arrow syntax for a method in a constructor?_


_Explain how prototypal inheritance works_


_Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?_


### Explain event delegation
- for example, rather than add an event listener to each image in a gallery, we can add an event listener to the parent gallery, and then use `e.target` (or similar) to get the specific item that was clicked on. Advantages include
  - less code
  - Code is DRYer
  - the code can still be applied to elements which have not yet been rendered on the page at the time that the script is read.


### Create a for loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at multiples of 5 and "fizzbuzz" at multiples of 3 and 5
-
```js
for (var i = 1; i <=100; i++) {
	if (i % 3 == 0) { console.log("fizz") }
	if (i % 5 == 0) { console.log("buzz") }
    if (i % 15 == 0) { console.log("fizbuzz") }
}
```



### Explain "hoisting".
- any variables that are declared in the current scope, will be intepreted as if they were declared in the top of the code ("hoisted") regardless of wherever they are actually declared. The assignation of a value will still take place at the actual point in the code where the value is assigned.
